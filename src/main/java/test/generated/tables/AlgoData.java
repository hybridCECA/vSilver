/*
 * This file is generated by jOOQ.
 */
package test.generated.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import test.generated.Keys;
import test.generated.Public;
import test.generated.tables.records.AlgoDataRecord;

import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AlgoData extends TableImpl<AlgoDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.algo_data</code>
     */
    public static final AlgoData ALGO_DATA = new AlgoData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlgoDataRecord> getRecordType() {
        return AlgoDataRecord.class;
    }

    /**
     * The column <code>public.algo_data.id</code>.
     */
    public final TableField<AlgoDataRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.algo_data.timestamp</code>.
     */
    public final TableField<AlgoDataRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.algo_data.algo_name</code>.
     */
    public final TableField<AlgoDataRecord, String> ALGO_NAME = createField(DSL.name("algo_name"), SQLDataType.CLOB.nullable(false), this, "");

    private AlgoData(Name alias, Table<AlgoDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private AlgoData(Name alias, Table<AlgoDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.algo_data</code> table reference
     */
    public AlgoData(String alias) {
        this(DSL.name(alias), ALGO_DATA);
    }

    /**
     * Create an aliased <code>public.algo_data</code> table reference
     */
    public AlgoData(Name alias) {
        this(alias, ALGO_DATA);
    }

    /**
     * Create a <code>public.algo_data</code> table reference
     */
    public AlgoData() {
        this(DSL.name("algo_data"), null);
    }

    public <O extends Record> AlgoData(Table<O> child, ForeignKey<O, AlgoDataRecord> key) {
        super(child, key, ALGO_DATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<AlgoDataRecord, Long> getIdentity() {
        return (Identity<AlgoDataRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AlgoDataRecord> getPrimaryKey() {
        return Keys.ALGO_DATA_PKEY;
    }

    @Override
    public AlgoData as(String alias) {
        return new AlgoData(DSL.name(alias), this);
    }

    @Override
    public AlgoData as(Name alias) {
        return new AlgoData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AlgoData rename(String name) {
        return new AlgoData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AlgoData rename(Name name) {
        return new AlgoData(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, LocalDateTime, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
