/*
 * This file is generated by jOOQ.
 */
package test.generated.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;

import test.generated.tables.CoinData;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoinDataRecord extends UpdatableRecordImpl<CoinDataRecord> implements Record5<Long, Long, String, Double, Double> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.coin_data.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.coin_data.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.coin_data.algo_id</code>.
     */
    public void setAlgoId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.coin_data.algo_id</code>.
     */
    public Long getAlgoId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.coin_data.coin_name</code>.
     */
    public void setCoinName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.coin_data.coin_name</code>.
     */
    public String getCoinName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.coin_data.coin_revenue</code>.
     */
    public void setCoinRevenue(Double value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.coin_data.coin_revenue</code>.
     */
    public Double getCoinRevenue() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>public.coin_data.exchange_rate</code>.
     */
    public void setExchangeRate(Double value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.coin_data.exchange_rate</code>.
     */
    public Double getExchangeRate() {
        return (Double) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, String, Double, Double> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Long, Long, String, Double, Double> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return CoinData.COIN_DATA.ID;
    }

    @Override
    public Field<Long> field2() {
        return CoinData.COIN_DATA.ALGO_ID;
    }

    @Override
    public Field<String> field3() {
        return CoinData.COIN_DATA.COIN_NAME;
    }

    @Override
    public Field<Double> field4() {
        return CoinData.COIN_DATA.COIN_REVENUE;
    }

    @Override
    public Field<Double> field5() {
        return CoinData.COIN_DATA.EXCHANGE_RATE;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getAlgoId();
    }

    @Override
    public String component3() {
        return getCoinName();
    }

    @Override
    public Double component4() {
        return getCoinRevenue();
    }

    @Override
    public Double component5() {
        return getExchangeRate();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getAlgoId();
    }

    @Override
    public String value3() {
        return getCoinName();
    }

    @Override
    public Double value4() {
        return getCoinRevenue();
    }

    @Override
    public Double value5() {
        return getExchangeRate();
    }

    @Override
    public CoinDataRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public CoinDataRecord value2(Long value) {
        setAlgoId(value);
        return this;
    }

    @Override
    public CoinDataRecord value3(String value) {
        setCoinName(value);
        return this;
    }

    @Override
    public CoinDataRecord value4(Double value) {
        setCoinRevenue(value);
        return this;
    }

    @Override
    public CoinDataRecord value5(Double value) {
        setExchangeRate(value);
        return this;
    }

    @Override
    public CoinDataRecord values(Long value1, Long value2, String value3, Double value4, Double value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoinDataRecord
     */
    public CoinDataRecord() {
        super(CoinData.COIN_DATA);
    }

    /**
     * Create a detached, initialised CoinDataRecord
     */
    public CoinDataRecord(Long id, Long algoId, String coinName, Double coinRevenue, Double exchangeRate) {
        super(CoinData.COIN_DATA);

        setId(id);
        setAlgoId(algoId);
        setCoinName(coinName);
        setCoinRevenue(coinRevenue);
        setExchangeRate(exchangeRate);
    }
}
