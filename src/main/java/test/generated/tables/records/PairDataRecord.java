/*
 * This file is generated by jOOQ.
 */
package test.generated.tables.records;


import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;

import test.generated.tables.PairData;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PairDataRecord extends UpdatableRecordImpl<PairDataRecord> implements Record8<Long, Integer, Integer, String, String, LocalDateTime, Double, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.pair_data.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.pair_data.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.pair_data.algo_fulfill_price</code>.
     */
    public void setAlgoFulfillPrice(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.pair_data.algo_fulfill_price</code>.
     */
    public Integer getAlgoFulfillPrice() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.pair_data.coin_revenue</code>.
     */
    public void setCoinRevenue(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.pair_data.coin_revenue</code>.
     */
    public Integer getCoinRevenue() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.pair_data.algo_name</code>.
     */
    public void setAlgoName(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.pair_data.algo_name</code>.
     */
    public String getAlgoName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.pair_data.coin_name</code>.
     */
    public void setCoinName(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.pair_data.coin_name</code>.
     */
    public String getCoinName() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.pair_data.timestamp</code>.
     */
    public void setTimestamp(LocalDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.pair_data.timestamp</code>.
     */
    public LocalDateTime getTimestamp() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>public.pair_data.exchange_rate</code>.
     */
    public void setExchangeRate(Double value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.pair_data.exchange_rate</code>.
     */
    public Double getExchangeRate() {
        return (Double) get(6);
    }

    /**
     * Setter for <code>public.pair_data.market</code>.
     */
    public void setMarket(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.pair_data.market</code>.
     */
    public String getMarket() {
        return (String) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Integer, Integer, String, String, LocalDateTime, Double, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, Integer, Integer, String, String, LocalDateTime, Double, String> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return PairData.PAIR_DATA.ID;
    }

    @Override
    public Field<Integer> field2() {
        return PairData.PAIR_DATA.ALGO_FULFILL_PRICE;
    }

    @Override
    public Field<Integer> field3() {
        return PairData.PAIR_DATA.COIN_REVENUE;
    }

    @Override
    public Field<String> field4() {
        return PairData.PAIR_DATA.ALGO_NAME;
    }

    @Override
    public Field<String> field5() {
        return PairData.PAIR_DATA.COIN_NAME;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return PairData.PAIR_DATA.TIMESTAMP;
    }

    @Override
    public Field<Double> field7() {
        return PairData.PAIR_DATA.EXCHANGE_RATE;
    }

    @Override
    public Field<String> field8() {
        return PairData.PAIR_DATA.MARKET;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getAlgoFulfillPrice();
    }

    @Override
    public Integer component3() {
        return getCoinRevenue();
    }

    @Override
    public String component4() {
        return getAlgoName();
    }

    @Override
    public String component5() {
        return getCoinName();
    }

    @Override
    public LocalDateTime component6() {
        return getTimestamp();
    }

    @Override
    public Double component7() {
        return getExchangeRate();
    }

    @Override
    public String component8() {
        return getMarket();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getAlgoFulfillPrice();
    }

    @Override
    public Integer value3() {
        return getCoinRevenue();
    }

    @Override
    public String value4() {
        return getAlgoName();
    }

    @Override
    public String value5() {
        return getCoinName();
    }

    @Override
    public LocalDateTime value6() {
        return getTimestamp();
    }

    @Override
    public Double value7() {
        return getExchangeRate();
    }

    @Override
    public String value8() {
        return getMarket();
    }

    @Override
    public PairDataRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public PairDataRecord value2(Integer value) {
        setAlgoFulfillPrice(value);
        return this;
    }

    @Override
    public PairDataRecord value3(Integer value) {
        setCoinRevenue(value);
        return this;
    }

    @Override
    public PairDataRecord value4(String value) {
        setAlgoName(value);
        return this;
    }

    @Override
    public PairDataRecord value5(String value) {
        setCoinName(value);
        return this;
    }

    @Override
    public PairDataRecord value6(LocalDateTime value) {
        setTimestamp(value);
        return this;
    }

    @Override
    public PairDataRecord value7(Double value) {
        setExchangeRate(value);
        return this;
    }

    @Override
    public PairDataRecord value8(String value) {
        setMarket(value);
        return this;
    }

    @Override
    public PairDataRecord values(Long value1, Integer value2, Integer value3, String value4, String value5, LocalDateTime value6, Double value7, String value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PairDataRecord
     */
    public PairDataRecord() {
        super(PairData.PAIR_DATA);
    }

    /**
     * Create a detached, initialised PairDataRecord
     */
    public PairDataRecord(Long id, Integer algoFulfillPrice, Integer coinRevenue, String algoName, String coinName, LocalDateTime timestamp, Double exchangeRate, String market) {
        super(PairData.PAIR_DATA);

        setId(id);
        setAlgoFulfillPrice(algoFulfillPrice);
        setCoinRevenue(coinRevenue);
        setAlgoName(algoName);
        setCoinName(coinName);
        setTimestamp(timestamp);
        setExchangeRate(exchangeRate);
        setMarket(market);
    }
}
