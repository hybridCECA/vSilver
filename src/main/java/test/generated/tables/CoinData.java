/*
 * This file is generated by jOOQ.
 */
package test.generated.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import test.generated.Keys;
import test.generated.Public;
import test.generated.tables.records.CoinDataRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoinData extends TableImpl<CoinDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.coin_data</code>
     */
    public static final CoinData COIN_DATA = new CoinData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoinDataRecord> getRecordType() {
        return CoinDataRecord.class;
    }

    /**
     * The column <code>public.coin_data.id</code>.
     */
    public final TableField<CoinDataRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.coin_data.algo_id</code>.
     */
    public final TableField<CoinDataRecord, Long> ALGO_ID = createField(DSL.name("algo_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.coin_data.coin_name</code>.
     */
    public final TableField<CoinDataRecord, String> COIN_NAME = createField(DSL.name("coin_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.coin_data.coin_revenue</code>.
     */
    public final TableField<CoinDataRecord, Double> COIN_REVENUE = createField(DSL.name("coin_revenue"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.coin_data.exchange_rate</code>.
     */
    public final TableField<CoinDataRecord, Double> EXCHANGE_RATE = createField(DSL.name("exchange_rate"), SQLDataType.DOUBLE.nullable(false), this, "");

    private CoinData(Name alias, Table<CoinDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoinData(Name alias, Table<CoinDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.coin_data</code> table reference
     */
    public CoinData(String alias) {
        this(DSL.name(alias), COIN_DATA);
    }

    /**
     * Create an aliased <code>public.coin_data</code> table reference
     */
    public CoinData(Name alias) {
        this(alias, COIN_DATA);
    }

    /**
     * Create a <code>public.coin_data</code> table reference
     */
    public CoinData() {
        this(DSL.name("coin_data"), null);
    }

    public <O extends Record> CoinData(Table<O> child, ForeignKey<O, CoinDataRecord> key) {
        super(child, key, COIN_DATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CoinDataRecord, Long> getIdentity() {
        return (Identity<CoinDataRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoinDataRecord> getPrimaryKey() {
        return Keys.COIN_DATA_PKEY;
    }

    @Override
    public List<ForeignKey<CoinDataRecord, ?>> getReferences() {
        return Arrays.asList(Keys.COIN_DATA__FK_CONSTRAINT);
    }

    private transient AlgoData _algoData;

    public AlgoData algoData() {
        if (_algoData == null)
            _algoData = new AlgoData(this, Keys.COIN_DATA__FK_CONSTRAINT);

        return _algoData;
    }

    @Override
    public CoinData as(String alias) {
        return new CoinData(DSL.name(alias), this);
    }

    @Override
    public CoinData as(Name alias) {
        return new CoinData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoinData rename(String name) {
        return new CoinData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoinData rename(Name name) {
        return new CoinData(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, String, Double, Double> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
