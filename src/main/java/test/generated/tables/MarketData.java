/*
 * This file is generated by jOOQ.
 */
package test.generated.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import test.generated.Keys;
import test.generated.Public;
import test.generated.tables.records.MarketDataRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MarketData extends TableImpl<MarketDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.market_data</code>
     */
    public static final MarketData MARKET_DATA = new MarketData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MarketDataRecord> getRecordType() {
        return MarketDataRecord.class;
    }

    /**
     * The column <code>public.market_data.id</code>.
     */
    public final TableField<MarketDataRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.market_data.algo_id</code>.
     */
    public final TableField<MarketDataRecord, Long> ALGO_ID = createField(DSL.name("algo_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.market_data.market_name</code>.
     */
    public final TableField<MarketDataRecord, String> MARKET_NAME = createField(DSL.name("market_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.market_data.fulfill_speed</code>.
     */
    public final TableField<MarketDataRecord, Double> FULFILL_SPEED = createField(DSL.name("fulfill_speed"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.market_data.total_speed</code>.
     */
    public final TableField<MarketDataRecord, Double> TOTAL_SPEED = createField(DSL.name("total_speed"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.market_data.fulfill_price</code>.
     */
    public final TableField<MarketDataRecord, Integer> FULFILL_PRICE = createField(DSL.name("fulfill_price"), SQLDataType.INTEGER.nullable(false), this, "");

    private MarketData(Name alias, Table<MarketDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private MarketData(Name alias, Table<MarketDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.market_data</code> table reference
     */
    public MarketData(String alias) {
        this(DSL.name(alias), MARKET_DATA);
    }

    /**
     * Create an aliased <code>public.market_data</code> table reference
     */
    public MarketData(Name alias) {
        this(alias, MARKET_DATA);
    }

    /**
     * Create a <code>public.market_data</code> table reference
     */
    public MarketData() {
        this(DSL.name("market_data"), null);
    }

    public <O extends Record> MarketData(Table<O> child, ForeignKey<O, MarketDataRecord> key) {
        super(child, key, MARKET_DATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<MarketDataRecord, Long> getIdentity() {
        return (Identity<MarketDataRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MarketDataRecord> getPrimaryKey() {
        return Keys.MARKET_DATA_PKEY;
    }

    @Override
    public List<ForeignKey<MarketDataRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MARKET_DATA__FK_CONSTRAINT);
    }

    private transient AlgoData _algoData;

    public AlgoData algoData() {
        if (_algoData == null)
            _algoData = new AlgoData(this, Keys.MARKET_DATA__FK_CONSTRAINT);

        return _algoData;
    }

    @Override
    public MarketData as(String alias) {
        return new MarketData(DSL.name(alias), this);
    }

    @Override
    public MarketData as(Name alias) {
        return new MarketData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MarketData rename(String name) {
        return new MarketData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MarketData rename(Name name) {
        return new MarketData(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, String, Double, Double, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
