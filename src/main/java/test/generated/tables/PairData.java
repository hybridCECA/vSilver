/*
 * This file is generated by jOOQ.
 */
package test.generated.tables;


import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import test.generated.Keys;
import test.generated.Public;
import test.generated.tables.records.PairDataRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PairData extends TableImpl<PairDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pair_data</code>
     */
    public static final PairData PAIR_DATA = new PairData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PairDataRecord> getRecordType() {
        return PairDataRecord.class;
    }

    /**
     * The column <code>public.pair_data.id</code>.
     */
    public final TableField<PairDataRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.pair_data.algo_fulfill_price</code>.
     */
    public final TableField<PairDataRecord, Integer> ALGO_FULFILL_PRICE = createField(DSL.name("algo_fulfill_price"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pair_data.coin_revenue</code>.
     */
    public final TableField<PairDataRecord, Integer> COIN_REVENUE = createField(DSL.name("coin_revenue"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pair_data.algo_name</code>.
     */
    public final TableField<PairDataRecord, String> ALGO_NAME = createField(DSL.name("algo_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.pair_data.coin_name</code>.
     */
    public final TableField<PairDataRecord, String> COIN_NAME = createField(DSL.name("coin_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.pair_data.timestamp</code>.
     */
    public final TableField<PairDataRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.pair_data.exchange_rate</code>.
     */
    public final TableField<PairDataRecord, Double> EXCHANGE_RATE = createField(DSL.name("exchange_rate"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.pair_data.market</code>.
     */
    public final TableField<PairDataRecord, String> MARKET = createField(DSL.name("market"), SQLDataType.CLOB.nullable(false), this, "");

    private PairData(Name alias, Table<PairDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private PairData(Name alias, Table<PairDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.pair_data</code> table reference
     */
    public PairData(String alias) {
        this(DSL.name(alias), PAIR_DATA);
    }

    /**
     * Create an aliased <code>public.pair_data</code> table reference
     */
    public PairData(Name alias) {
        this(alias, PAIR_DATA);
    }

    /**
     * Create a <code>public.pair_data</code> table reference
     */
    public PairData() {
        this(DSL.name("pair_data"), null);
    }

    public <O extends Record> PairData(Table<O> child, ForeignKey<O, PairDataRecord> key) {
        super(child, key, PAIR_DATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PairDataRecord, Long> getIdentity() {
        return (Identity<PairDataRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PairDataRecord> getPrimaryKey() {
        return Keys.PAIR_DATA_PKEY;
    }

    @Override
    public PairData as(String alias) {
        return new PairData(DSL.name(alias), this);
    }

    @Override
    public PairData as(Name alias) {
        return new PairData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PairData rename(String name) {
        return new PairData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PairData rename(Name name) {
        return new PairData(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Integer, Integer, String, String, LocalDateTime, Double, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
